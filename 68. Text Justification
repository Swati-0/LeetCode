class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        vector<string> result;
        int index = 0;

        while (index < words.size()) {
            int totalChars = words[index].length();
            int last = index + 1;

            // Find how many words can fit in the current line
            while (last < words.size()) {
                if (totalChars + 1 + words[last].length() > maxWidth) break;
                totalChars += 1 + words[last].length();
                last++;
            }

            string line;
            int numWords = last - index;
            int numSpaces = maxWidth - totalChars + (numWords - 1);

            // If last line or only one word, left justify
            if (last == words.size() || numWords == 1) {
                for (int i = index; i < last; ++i) {
                    line += words[i];
                    if (i != last - 1) line += " ";
                }
                line += string(maxWidth - line.size(), ' ');
            } else {
                int spaces = (maxWidth - totalChars + numWords - 1) / (numWords - 1);
                int extra = (maxWidth - totalChars + numWords - 1) % (numWords - 1);

                for (int i = index; i < last; ++i) {
                    line += words[i];
                    if (i != last - 1) {
                        int spaceToApply = spaces + (extra-- > 0 ? 1 : 0);
                        line += string(spaceToApply, ' ');
                    }
                }
            }

            result.push_back(line);
            index = last;
        }

        return result;
    }
};
